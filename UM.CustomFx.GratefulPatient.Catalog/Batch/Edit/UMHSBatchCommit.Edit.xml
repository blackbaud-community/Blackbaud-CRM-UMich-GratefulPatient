<EditDataFormTemplateSpec
	xmlns="bb_appfx_editdataformtemplate"
	xmlns:c="bb_appfx_commontypes"
	ID="6b2cb52a-1c9c-40e0-a041-280405d60673"
	Name="MIMED Batch Commit Edit Data Form"
	Description="A data form for editing MIMED Batch commit records"
	Author="UM Dev"
	DataFormInstanceID="ff27f482-b8c4-415f-a345-21389529d2d8"
	RecordType="MIMED Data"
	c:SecurityUIFolder="MIMED Batch"
	FormHeader="Edit an MIMED Batch commit"
	>

    <SPDataForm>

        <!-- define the edit load SP, which is used to load the data for the form -->
        <LoadImplementation SPName="USR_USP_DATAFORMTEMPLATE_EDITLOAD_UMHSBATCHCOMMIT">
            <c:CreateProcedureSQL>
                <![CDATA[
create procedure dbo.USR_USP_DATAFORMTEMPLATE_EDITLOAD_UMHSBATCHCOMMIT
(
     @ID uniqueidentifier
    ,@BATCHCONSTITUENTID uniqueidentifier = null output
    ,@DATALOADED bit = 0  output
    ,@CONSTITUENTID uniqueidentifier = null output
    ,@SEQUENCE int = null output
    ,@TSLONG bigint = 0 output
    ,@VALIDATEONLY bit = null output
    -- Batch fields
    ,@MRN           nvarchar(50) = null output
    ,@CPISEQUENCE   nvarchar(50) = null output
    ,@CONSTITUENTLOOKUPID nvarchar(200) = null output
    ,@FIRSTNAME     nvarchar(50) = null output
    ,@MIDDLENAME    nvarchar(50) = null output
    ,@LASTNAME      nvarchar(100) = null output
    ,@ISUMAFFILATION bit = null output    
    ,@SUFFIXCODEID  uniqueidentifier = null output
    ,@BIRTHDATE     udt_fuzzydate = null output
    ,@ADDRESSBLOCK       nvarchar(500) = null output
    ,@CITY          nvarchar(100) = null output
    ,@STATEID   uniqueidentifier  = null output
    ,@POSTCODE       nvarchar(24) = null output
    ,@COUNTRYID uniqueidentifier = null output
    ,@ADDRESSTYPECODEID uniqueidentifier = null output
    ,@INFOSOURCECODEID uniqueidentifier = null output
    ,@HISTORICALSTARTDATE date = null output
    ,@PHONENUMBER nvarchar(200) = null output
    ,@PHONETYPECODEID uniqueidentifier = null output
    ,@PHONE_COUNTRYID uniqueidentifier = null output
    ,@PHONE_OTHER nvarchar(200) = null output
    ,@PHONE_OTHER_COUNTRYID uniqueidentifier = null output
    ,@PHONE_OTHERTYPECODEID uniqueidentifier = null output
    ,@PHONESTARTDATE date = null output
    ,@EMAILADDRESS  nvarchar(100) = null output  
    ,@EMAILADDRESSTYPECODEID uniqueidentifier = null output
    ,@EMAILADDRESSSTARTDATE date = null output
    ,@GENDERCODE    tinyint  = null output
    ,@ISDMINELIGIBLE  bit = null output
    ,@DMINELIGIBLEREASONCODEID uniqueidentifier = null output
    ,@WEDMSCORECODEID        uniqueidentifier = null output
    ,@WEDMSCORESTARTDATE date = null output
    ,@WEESTGIVCAPACITYCODEID uniqueidentifier = null output
    ,@WEESTGIVCAPACITYCOMMENT nvarchar(510) = null output
    ,@WEESTGIVCAPACITYSTARTDATE date = null output
    ,@UMHSDATA_LASTPROCDATE datetime = null output
    ,@ISGPIMPORTEDRECORD bit = null output    
    ,@HASUMAFFILIATION bit = null output
    ,@WEALTHSCORES_TOTALESTIMATEDASSETS nvarchar(50) = null output
    ,@WEALTHSCORES_RATINGID uniqueidentifier = null output
)
as

	set nocount on;

	-- populate the output parameters, which correspond to fields on the form.  Note that
	-- we set @DATALOADED = 1 to indicate that the load was successful.  Otherwise, the system
	-- will display a "no data loaded" message.  Also note that we fetch the TSLONG so that concurrency
	-- can be considered.
	set @DATALOADED = 0
	set @TSLONG = 0
				
	declare @CURRENTDATE datetime
	set @CURRENTDATE = getdate()
  
	select
		 @ID = @ID
		,@DATALOADED = 1
		,@BATCHCONSTITUENTID = newid()
		,@TSLONG = d.TSLONG
		,@CONSTITUENTID = c.ID
		,@CONSTITUENTLOOKUPID = c.LOOKUPID
		,@FIRSTNAME = d.FIRSTNAME
		,@MIDDLENAME = d.MIDDLENAME
		,@LASTNAME = d.KEYNAME
		,@SUFFIXCODEID = d.SUFFIX2CODEID
		,@BIRTHDATE = d.BIRTHDATE
		,@GENDERCODE = d.GENDERCODE
		,@ADDRESSBLOCK = a.ADDRESSBLOCK
		,@CITY = a.CITY
		,@STATEID = a.STATEID
		,@POSTCODE = a.POSTCODE
		,@COUNTRYID = a.COUNTRYID
		,@ADDRESSTYPECODEID = a.ADDRESSTYPECODEID
		,@INFOSOURCECODEID = '3c3c7fa4-d8c3-444c-96a8-34a773493137' -- Med/Hospital Batch
		,@HISTORICALSTARTDATE = case when a.HISTORICALSTARTDATE is NULL then @CURRENTDATE else a.HISTORICALSTARTDATE end
		,@PHONENUMBER = p.NUMBER
		,@PHONETYPECODEID = p.PHONETYPECODEID
		,@PHONE_COUNTRYID = p.COUNTRYID
		,@PHONESTARTDATE = case when p.STARTDATE is NULL then @CURRENTDATE else p.STARTDATE end
		,@EMAILADDRESS = e.EMAILADDRESS
		,@EMAILADDRESSTYPECODEID = e.EMAILADDRESSTYPECODEID
		,@EMAILADDRESSSTARTDATE = case when e.STARTDATE is NULL then @CURRENTDATE else e.STARTDATE end
		,@GENDERCODE = case when d.GENDERCODE is NULL then 0 else d.GENDERCODE end
		,@ISDMINELIGIBLE = 0
		,@ISGPIMPORTEDRECORD = 0 
	from dbo.CONSTITUENT c
	left outer join dbo.USR_UMHS_DATA d on c.ID=d.CONSTITUENTID
	left outer join dbo.USR_UMHS_ADDRESS a on a.UMHSID=d.ID
	left outer join dbo.USR_UMHS_PHONE p on p.UMHSID=d.ID
	left outer join dbo.USR_UMHS_EMAILADDRESS e on e.UMHSID=d.ID
	where
		c.ID=@ID
      
  
	return 0;
				]]>
            </c:CreateProcedureSQL>
        </LoadImplementation>

        <SaveImplementation SPName="USR_USP_DATAFORMTEMPLATE_EDIT_UMHSBATCHCOMMIT">
            <c:CreateProcedureSQL>
                <![CDATA[
create procedure dbo.USR_USP_DATAFORMTEMPLATE_EDIT_UMHSBATCHCOMMIT 
(
     @ID uniqueidentifier
    ,@CHANGEAGENTID uniqueidentifier
    ,@SEQUENCE int
    ,@VALIDATEONLY bit
    -- Batch fields
    ,@BATCHCONSTITUENTID UNIQUEIDENTIFIER
    ,@CONSTITUENTID uniqueidentifier    -- Primary Record ID
    ,@MRN           nvarchar(50)
    ,@CPISEQUENCE   nvarchar(50)
    ,@CONSTITUENTLOOKUPID nvarchar(200)
    ,@FIRSTNAME     nvarchar(50)
    ,@MIDDLENAME    nvarchar(50)
    ,@LASTNAME      nvarchar(100)
    ,@SUFFIXCODEID  uniqueidentifier
    ,@BIRTHDATE     udt_fuzzydate
    ,@ADDRESSBLOCK       nvarchar(500)
    ,@CITY          nvarchar(100)
    ,@STATEID   uniqueidentifier
    ,@POSTCODE       nvarchar(24)
    ,@COUNTRYID uniqueidentifier
    ,@ADDRESSTYPECODEID uniqueidentifier
    ,@INFOSOURCECODEID uniqueidentifier
    ,@HISTORICALSTARTDATE date
    ,@PHONENUMBER nvarchar(200)
    ,@PHONETYPECODEID uniqueidentifier
    ,@PHONE_COUNTRYID uniqueidentifier
    ,@PHONE_OTHER nvarchar(200)
    ,@PHONE_OTHER_COUNTRYID uniqueidentifier
    ,@PHONE_OTHERTYPECODEID uniqueidentifier
    ,@PHONESTARTDATE date
    ,@EMAILADDRESS  nvarchar(100)  
    ,@EMAILADDRESSTYPECODEID uniqueidentifier
    ,@EMAILADDRESSSTARTDATE date
    ,@GENDERCODE    tinyint
    ,@ISDMINELIGIBLE  bit
    ,@DMINELIGIBLEREASONCODEID uniqueidentifier
    ,@WEDMSCORECODEID        uniqueidentifier
    ,@WEDMSCORESTARTDATE date
    ,@WEESTGIVCAPACITYCODEID uniqueidentifier
    ,@WEESTGIVCAPACITYCOMMENT nvarchar(510)
    ,@WEESTGIVCAPACITYSTARTDATE date
    ,@UMHSDATA_LASTPROCDATE datetime
    ,@HASUMAFFILIATION bit
    ,@WEALTHSCORES_TOTALESTIMATEDASSETS nvarchar(50)
    ,@WEALTHSCORES_RATINGID uniqueidentifier
)
as

	set nocount on;
				
	declare @CURRENTDATE datetime;
	set @CURRENTDATE = getdate();
  
	if @CHANGEAGENTID is null  
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output
    
	begin try
      
    declare 
       @UMHSID         uniqueidentifier
      ,@CONTACT_MRN    nvarchar(50)
      ,@CONTACT_CPISEQUENCE nvarchar(50)
      ,@STR_CONSTITUENTID nvarchar(50)
      ,@NICKNAME       nvarchar(50)
      ,@TITLECODEID    uniqueidentifier
      ,@TITLE2CODEID   uniqueidentifier
      ,@SUFFIX2CODEID  uniqueidentifier
      ,@PATIENTORIGINATIONCODEID  uniqueidentifier
      ,@PROSPECTORIGINATIONCODEID uniqueidentifier
      ,@ISPRIMARY bit
      ,@CURR_UMHSDATA_LASTPROCDATE datetime
      ,@STR_CURR_UMHSDATA_LASTPROCDATE nvarchar(50)
      ,@ISGPIMPORTEDRECORD bit
      ,@ERRORMSG nvarchar(200);

      /*
       * Default non-required string fields to an empty string per the constraints on the USR_UMHS_DATA table
       */
      set @MIDDLENAME=ltrim(rtrim(isnull(@MIDDLENAME, N'')));
      set @ADDRESSBLOCK=ltrim(rtrim(isnull(@ADDRESSBLOCK, N'')));
      set @CITY=ltrim(rtrim(isnull(@CITY, N'')));
      set @POSTCODE=ltrim(rtrim(isnull(@POSTCODE, N'')));
      set @PHONENUMBER=ltrim(rtrim(isnull(@PHONENUMBER, N'')));
      set @PHONE_OTHER=ltrim(rtrim(isnull(@PHONE_OTHER, N'')));
      set @EMAILADDRESS=ltrim(rtrim(isnull(@EMAILADDRESS, N'')));
      
    	exec dbo.USP_USR_UMHS_HASUMAFFILIATION @CONSTITUENTID=@CONSTITUENTID, @HASUMAFFILIATION=@HASUMAFFILIATION OUTPUT;

      if (1 = @HASUMAFFILIATION)
      begin
          /*
           * Commit of U-M Affilates as set in the batch template's Configure options/Contact batch settings
           */
          if not exists (select 1 from USR_UMHS_BATCH_UMAFFILIATION where CONSTITUENTID=@CONSTITUENTID and MRN=@MRN)
          begin
            insert into USR_UMHS_BATCH_UMAFFILIATION 
             (ID
             ,CONSTITUENTID
             ,MRN
             ,HASUMAFFILIATION
             ,ADDEDBYID
             ,CHANGEDBYID
             ,DATEADDED
             ,DATECHANGED)
            VALUES 
             (newid()
             ,@CONSTITUENTID
             ,@MRN
             ,1
             ,@CHANGEAGENTID
             ,@CHANGEAGENTID
             ,@CURRENTDATE
             ,@CURRENTDATE)
          end
          
          return;
      end
      
      /*
       * Currently *not* batching in these values, but they may have been set via the UI, 
       * so we're querying for them before calling the Edit procedure
       */
      select 
         @UMHSID=d.ID
        ,@CONTACT_MRN=d.MRN
        ,@CONTACT_CPISEQUENCE=d.CPISEQUENCE
        ,@NICKNAME=d.NICKNAME
        ,@TITLECODEID=d.TITLECODEID
        ,@TITLE2CODEID=d.TITLE2CODEID
        ,@SUFFIX2CODEID=d.SUFFIX2CODEID
        ,@CURR_UMHSDATA_LASTPROCDATE=d.UMHSDATA_LASTPROCDATE
      from USR_UMHS_DATA d
      inner join constituent c on c.ID=d.CONSTITUENTID
      where 
        CONSTITUENTID=@CONSTITUENTID

      
      /*
       * Updating the MIMED Data on an existing Contact
       */
      if @UMHSID is not null  
      BEGIN
  
        /*
         * If the MRN read from the database for the Constituen has a value (i.e. is not blank), but is different 
         * from the MRN value being imported, then throw an exception due to having multiple MRNs for the 
         * same individual. If the existing Contact has a blank MRN, then the imported MRN will replace it. A blank
         * MRN indicates that the individual was manually entered, but wasn't originally a UMHS/MIMED Contact.
         */
        IF (0 < len(ltrim(rtrim(@CONTACT_MRN))))
        BEGIN
          IF (@CONTACT_MRN <> @MRN)
          BEGIN
            SET @ERRORMSG = 'Imported MRN (' + @MRN + ') is different from the MRN (' + @CONTACT_MRN + ') on the existing Contact.';
            RAISERROR(@ERRORMSG, 13, 1);
          END
        END
        
        /* 
         * Apply the batch updates only if the UMHSDATA_LASTPROCDATE on the current Contact record in the
         * database is either NULL or older than the UMHSDATA_LASTPROCDATE on imported in the batch record. 
         * If the UMHSDATA_LASTPROCDATE on the current Contact record is NULL, then it is assumed that either 
         * the Contact was added from the UI or that by a Contact batch was imported via the File 
         * Import mechanism and not through the GP Import process.
         *
         * If condition cases:
         *  (@CURR_UMHSDATA_LASTPROCDATE = 1 AND @UMHSDATA_LASTPROCDATE = 1) - This is the case where there isn't an existing UMHS/MIMED record and the batch data was imported via the GP Import Process. 
         *                                                                     The 2nd condition is not tested.
         *  (@CURR_UMHSDATA_LASTPROCDATE = 0 AND @UMHSDATA_LASTPROCDATE = 1) - This is the where an existing MIMED record is being updated from batch data that was manually imported via the File Import Process or Batch Edit window.  
         *                                                                     The 2nd condition is not tested.
         *  (@CURR_UMHSDATA_LASTPROCDATE = 1 AND @UMHSDATA_LASTPROCDATE = 0) - This is the case where a new UMHS/MIMED record is being added from batch data that was import via the GP Import Process.
         *  (@CURR_UMHSDATA_LASTPROCDATE = 0 AND @UMHSDATA_LASTPROCDATE = 0) - This is the case where an existing UMHS/MIMED record is being updated by batch data that was imported via the GP Import Process.
         *                                                                     This then falls into the 2nd condition to test if the batch Last Proc Date is newer that the record's (current) Last Proc Date.
         *
         */
        IF (NOT ((@CURR_UMHSDATA_LASTPROCDATE is null) or (@UMHSDATA_LASTPROCDATE is null))) and (@CURR_UMHSDATA_LASTPROCDATE >= @UMHSDATA_LASTPROCDATE)
        BEGIN
          /*
           * Neither the the current Last Proc Date on the record or the batched in Last Proc Date is NULL, but the current Last Proc Date on the 
           * current record is the same or newer than the batched in Last Proc Date. So the batch data is considered to be out of date (older) than
           * the current record's data.
           */
          set @STR_CURR_UMHSDATA_LASTPROCDATE=format(@CURR_UMHSDATA_LASTPROCDATE,'MM/dd/yyyy H\:mm\:ss\.ff', 'en-US')
          RAISERROR('The UMHSDATA Import process date is the same or older than the Contact''s current Import Process Date of %s.', 13, 1, @STR_CURR_UMHSDATA_LASTPROCDATE);
        END
        
        EXEC dbo.USP_USR_UMHS_BATCH_EDIT_INDIVIDUAL
           @UMHSID=@UMHSID
          ,@CONSTITUENTID=@CONSTITUENTID
          ,@CHANGEAGENTID=@CHANGEAGENTID
          ,@MRN=@MRN
          ,@CPISEQUENCE=@CPISEQUENCE
          ,@FIRSTNAME=@FIRSTNAME
          ,@MIDDLENAME=@MIDDLENAME
          ,@LASTNAME=@LASTNAME
          ,@NICKNAME=@NICKNAME
          ,@BIRTHDATE=@BIRTHDATE
          ,@GENDERCODE=@GENDERCODE
          ,@TITLECODEID=@TITLECODEID
          ,@TITLE2CODEID=@TITLE2CODEID
          ,@SUFFIXCODEID=@SUFFIXCODEID
          ,@SUFFIX2CODEID=@SUFFIX2CODEID
          ,@INFOSOURCECODEID=@INFOSOURCECODEID
          ,@ISDMINELIGIBLE=@ISDMINELIGIBLE
          ,@DMINELIGIBLEREASONCODEID=@DMINELIGIBLEREASONCODEID
          ,@UMHSDATA_LASTPROCDATE=@UMHSDATA_LASTPROCDATE;
      
        /*
         ***************
         *** Address ***
         ***************
         */
        DECLARE @UMHSADDRESSID uniqueidentifier = null;
        DECLARE @HOMEADDRESSTYPECODEID uniqueidentifier = isnull(@ADDRESSTYPECODEID, '68F9E4F9-0F55-4EDC-8369-8773B6E95245');  -- Defaults to 'Home';
        DECLARE @DONOTMAILREASONCODEID uniqueidentifier = 'EA036E45-3189-497B-8219-ED07C2BEE70E'   -- 'Last Known'
	      DECLARE @MATCHINGADDRESSES table (ID uniqueidentifier, ADDRESSTYPECODE UNIQUEIDENTIFIER);
        DECLARE @MATCHINGADDRESSCOUNT int=0;
        DECLARE @PRIMARYADDRESSID uniqueidentifier = null;
        DECLARE @PRIMARYADDRESSTYPECODEID uniqueidentifier = null;

        /*
         * Don't add/edit an address if the ADDRESSBLOCK is empty
         */
        IF nullif(isnull(@ADDRESSBLOCK, ''), '') is NOT null
        BEGIN

            /*
             * Get the ID for the current Primary address
             */
            SELECT
                @PRIMARYADDRESSID = ID
                ,@PRIMARYADDRESSTYPECODEID = ADDRESSTYPECODEID
            FROM USR_UMHS_ADDRESS
            WHERE
                UMHSID=@UMHSID
            AND ISPRIMARY=1
            AND nullif(isnull(HISTORICALENDDATE, ''), '') is NULL

            /*
            * Get list of current addresses that match the batch address
            */
		        INSERT INTO @MATCHINGADDRESSES (ID, ADDRESSTYPECODE)
            SELECT 
                 ID
                ,ADDRESSTYPECODEID
            FROM dbo.USR_UMHS_ADDRESS
            WHERE
                UMHSID=@UMHSID
            AND ADDRESSBLOCK = @ADDRESSBLOCK
            AND CITY = @CITY
            AND STATEID = @STATEID
            AND POSTCODE = @POSTCODE
            AND STATEID = @STATEID
            AND COUNTRYID = @COUNTRYID
            AND nullif(isnull(HISTORICALENDDATE, ''), '') is null
    
            /*
             * Get the number of matching addresses.
             */
            SELECT @MATCHINGADDRESSCOUNT=COUNT(1) FROM @MATCHINGADDRESSES

            /*
             * None of the current addresses match the batch address
             */
		        IF	0 = @MATCHINGADDRESSCOUNT
            BEGIN
               /*
                * There are no matching addresses to the batch address. If there is currently a Primary address that is a 
                * non-matching Home address, then clear the primary flag and end date the current Primary Home address. 
                * Otherwise, if the current Primary address is a non-Home address, then clear the Primary flag on the current 
                * non-Home Primary address. Then add the batch address as the new Primary Home address. 
                *
                * Is there currently a Primary address?
                */
                IF @PRIMARYADDRESSID is not null
                BEGIN
                    /*
                     * If the existing Primary address is a Home address, then end date the current Primary Home address
                     */
                    IF @PRIMARYADDRESSTYPECODEID=@HOMEADDRESSTYPECODEID
                    BEGIN
                        EXEC dbo.USP_USR_UMHS_BATCH_ENDDATEADDRESS
                             @ID = @PRIMARYADDRESSID
                            ,@ENDDATE = @CURRENTDATE
                            ,@CHANGEAGENTID=@CHANGEAGENTID;
                    END
                    ELSE
                    BEGIN
                        /*
                         * Current Primary address is a non-home address, so clear Primary flag from 
                         * the current (non-home) Primary Address in order to set the batch address as the
                         * Primary Home Address
                         */
                        UPDATE USR_UMHS_ADDRESS
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYADDRESSID;
                    END   
                END   
          
                /*
                 *  Add in the batched in Address 
                 */
                SET @UMHSADDRESSID = newid();
                EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_ADDRESS
                     @ID=@UMHSADDRESSID OUTPUT
                    ,@CHANGEAGENTID=@CHANGEAGENTID
                    ,@UMHSID=@UMHSID
                    ,@ISPRIMARY=1
                    ,@COUNTRYID=@COUNTRYID
                    ,@STATEID=@STATEID
                    ,@ADDRESSBLOCK=@ADDRESSBLOCK
                    ,@CITY=@CITY
                    ,@POSTCODE=@POSTCODE
                    ,@ADDRESSTYPECODEID=@ADDRESSTYPECODEID
                    ,@INFOSOURCECODEID=@INFOSOURCECODEID
                    ,@HISTORICALSTARTDATE=@HISTORICALSTARTDATE

            END
            /*
             * There are current address(es) that match the batch address
             */
            ELSE IF	0 < @MATCHINGADDRESSCOUNT
            BEGIN
                /*
                 * The batch address matches the current Primary address
                 */
                IF EXISTS (SELECT 1 FROM @MATCHINGADDRESSES WHERE ID=@PRIMARYADDRESSID)
                BEGIN
                    /* 
                     * If the current Primary address matches the batch address and the current
                     * Primary address is a Home address, then we're done. Otherwise, if the current 
                     * Primary address matches the batch address, but the current Primary address 
                     * is a non-Home address, then clear the Primary flag on the current non-Home address
                     * and set a matching Home address as Primary. If none of the matching addresses is
                     * a Home address, then add the batch address as a new Primary Home address.
                     */
                    IF @PRIMARYADDRESSTYPECODEID <> @HOMEADDRESSTYPECODEID
                    BEGIN
                        /*
                         * Clear the Primary flag on the current non-Home Primary address
                         */
                        UPDATE USR_UMHS_ADDRESS
                        SET
                            ISPRIMARY=0,
                            CHANGEDBYID=@CHANGEAGENTID,
                            DATECHANGED=@CURRENTDATE
                        WHERE
                            ID=@PRIMARYADDRESSID;

                        /*
                         * Is there a matching batch address to a current Home address?
                         */
                        SET @UMHSADDRESSID = NULL

                        SELECT 
                            @UMHSADDRESSID=ID
                        FROM @MATCHINGADDRESSES
                        WHERE
                            ADDRESSTYPECODE=@HOMEADDRESSTYPECODEID

                        IF @UMHSADDRESSID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home address as the new Primary address
                             */
                            UPDATE USR_UMHS_ADDRESS
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSADDRESSID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch address as a new Primary Home address
                             */
                            SET @UMHSADDRESSID = newid();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_ADDRESS
                                 @ID=@UMHSADDRESSID OUTPUT
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@UMHSID=@UMHSID
                                ,@ISPRIMARY=1
                                ,@COUNTRYID=@COUNTRYID
                                ,@STATEID=@STATEID
                                ,@ADDRESSBLOCK=@ADDRESSBLOCK
                                ,@CITY=@CITY
                                ,@POSTCODE=@POSTCODE
                                ,@ADDRESSTYPECODEID=@ADDRESSTYPECODEID
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@HISTORICALSTARTDATE=@HISTORICALSTARTDATE

                        END
                    END
                END
                /* 
                 * The current Primary address doesn't match the batch address.
                 */                
                ELSE
                BEGIN
                    /*
                     * If the non-matching current Primary address is a Home address, then clear the Primary flag and end date
                     * this address. If the current Primary address is a non-Home address, then clear the Primary flag on the non-Home address.
                     * To set the new Primary Home address, if one of the match addresses is a Home address, then set the Primary flag
                     * on the matching Home address, otherwise if none of the matching addresses is a Home address,
                     * then add the batch address as a new Primary Home address.
                    */
                    IF @PRIMARYADDRESSTYPECODEID <> @HOMEADDRESSTYPECODEID
                    BEGIN
                        /*
                         * Clear the Primary flag on the current non-Home Primary address
                         */
                        UPDATE USR_UMHS_ADDRESS
                        SET
                            ISPRIMARY=0,
                            CHANGEDBYID=@CHANGEAGENTID,
                            DATECHANGED=@CURRENTDATE
                        WHERE
                            ID=@PRIMARYADDRESSID;

                        /*
                         * Is there a matching batch address to a current Home address?
                         */
                        SET @UMHSADDRESSID = NULL

                        SELECT 
                            @UMHSADDRESSID=ID
                        FROM @MATCHINGADDRESSES
                        WHERE
                            ADDRESSTYPECODE=@HOMEADDRESSTYPECODEID             
                            
                        IF @UMHSADDRESSID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home address as the new Primary address
                             */
                            UPDATE USR_UMHS_ADDRESS
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSADDRESSID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch address as a new Primary Home address
                             */
                            SET @UMHSADDRESSID = newid();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_ADDRESS
                                 @ID=@UMHSADDRESSID OUTPUT
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@UMHSID=@UMHSID
                                ,@ISPRIMARY=1
                                ,@COUNTRYID=@COUNTRYID
                                ,@STATEID=@STATEID
                                ,@ADDRESSBLOCK=@ADDRESSBLOCK
                                ,@CITY=@CITY
                                ,@POSTCODE=@POSTCODE
                                ,@ADDRESSTYPECODEID=@ADDRESSTYPECODEID
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@HISTORICALSTARTDATE=@HISTORICALSTARTDATE

                        END
                    END
                    /*
                     * The Primary address is a Home address that doesn't match the batch address
                    */
                    ELSE
                    BEGIN
                        /*
                         * Clear the Primary flag and end date current Primary Home address
                        */
                        EXEC dbo.USP_USR_UMHS_BATCH_ENDDATEADDRESS
                             @ID = @PRIMARYADDRESSID
                            ,@ENDDATE = @CURRENTDATE
                            ,@CHANGEAGENTID=@CHANGEAGENTID;          
                            
                        /*
                         * Is there a matching batch address to a current Home address?
                         */
                        SET @UMHSADDRESSID = NULL

                        SELECT 
                            @UMHSADDRESSID=ID
                        FROM @MATCHINGADDRESSES
                        WHERE
                            ADDRESSTYPECODE=@HOMEADDRESSTYPECODEID             
                            
                        IF @UMHSADDRESSID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home address as the new Primary address
                             */
                            UPDATE USR_UMHS_ADDRESS
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSADDRESSID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch address as a new Primary Home address
                             */
                            SET @UMHSADDRESSID = newid();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_ADDRESS
                                 @ID=@UMHSADDRESSID OUTPUT
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@UMHSID=@UMHSID
                                ,@ISPRIMARY=1
                                ,@COUNTRYID=@COUNTRYID
                                ,@STATEID=@STATEID
                                ,@ADDRESSBLOCK=@ADDRESSBLOCK
                                ,@CITY=@CITY
                                ,@POSTCODE=@POSTCODE
                                ,@ADDRESSTYPECODEID=@ADDRESSTYPECODEID
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@HISTORICALSTARTDATE=@HISTORICALSTARTDATE
                        END
                    END
                END
            END
          END


        /*
         ********************* 
         *** Email Address ***
         *********************
         */
        DECLARE @UMHSEMAILADDRESSID uniqueidentifier
        DECLARE @HOMEEMAILADDRESSTYPECODEID uniqueidentifier = isnull(@EMAILADDRESSTYPECODEID, 'C4ED26B5-36FE-4E24-AB95-10AA71AC7968');   -- Defaults to 'Home E-mail' address
        DECLARE @MATCHINGEMAILADDRESSES table (ID uniqueidentifier, EMAILADDRESSTYPECODE UNIQUEIDENTIFIER);
        DECLARE @MATCHINGEMAILADDRESSCOUNT int=0;
        DECLARE @PRIMARYEMAILADDRESSID uniqueidentifier = null;
        DECLARE @PRIMARYEMAILADDRESSTYPECODEID uniqueidentifier = null;

        /*
         * Validate the email address.
         */
        IF (0 < LEN(@EMAILADDRESS))
        BEGIN
          IF 0 = [dbo].[UFN_VALIDEMAILADDRESS](@EMAILADDRESS)
          BEGIN
            RAISERROR('Invalid email address format.', 13, 1);
          END
        END
      
        /*
         * Don't add/edit the email address if it is empty
         */
        IF nullif(isnull(@EMAILADDRESS, ''), '') is NOT null
        BEGIN
            /*
             * Get the ID for the current Primary email address
             */
            SELECT
                 @PRIMARYEMAILADDRESSID = ID
                ,@PRIMARYEMAILADDRESSTYPECODEID = EMAILADDRESSTYPECODEID
            FROM USR_UMHS_EMAILADDRESS
            WHERE
                UMHSID=@UMHSID
            AND ISPRIMARY=1
            AND nullif(isnull(ENDDATE, ''), '') is null 
              
            /*
            * Get list of current email addresses that match the batch email address
            */
            INSERT INTO @MATCHINGEMAILADDRESSES (ID, EMAILADDRESSTYPECODE)
            SELECT 
                 ID 
                ,EMAILADDRESSTYPECODEID
            FROM dbo.USR_UMHS_EMAILADDRESS
            WHERE
                UMHSID=@UMHSID
            AND @EMAILADDRESS = EMAILADDRESS
            AND nullif(isnull(ENDDATE, ''), '') is null
            
            SELECT @MATCHINGEMAILADDRESSCOUNT=COUNT(1) FROM @MATCHINGEMAILADDRESSES

            IF 0 = @MATCHINGEMAILADDRESSCOUNT
            BEGIN
               /*
                * There are no matching email addresses to the batch email address. If there is currently a Primary email address that is a 
                * non-matching Home email address, then clear the primary flag and end date the current Primary Home email address. 
                * Otherwise, if the current Primary email address is a non-Home email address, then clear the Primary flag on the current 
                * non-Home Primary email address. Then add the batch email address as the new Primary Home email address. 
                *
                * Is there currently a Primary email address?
                */
                IF @PRIMARYEMAILADDRESSID is not null
                BEGIN
                    /*
                     * If the existing Primary email address is a Home email address, then end date the current Primary Home email address
                     */
                    IF @PRIMARYEMAILADDRESSTYPECODEID=@HOMEEMAILADDRESSTYPECODEID
                    BEGIN
                        exec dbo.USP_USR_UMHS_BATCH_ENDDATEEMAIL
                             @ID = @PRIMARYEMAILADDRESSID
                            ,@ENDDATE = @CURRENTDATE
                            ,@CHANGEAGENTID=@CHANGEAGENTID;
                    END
                    ELSE
                    BEGIN
                        /*
                         * Current Primary email address is a non-home email address, so clear Primary flag from 
                         * the current (non-home) Primary email address in order to set the batch email address as the
                         * Primary Home email address
                         */
                        UPDATE USR_UMHS_EMAILADDRESS
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYEMAILADDRESSID;
                    END   
                END   
          
                /*
                 *  Add in the batched in email address 
                 */
                SET @UMHSEMAILADDRESSID = NEWID();
                EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_USR_UMHS_EMAILADDRESS
                    @ID=@UMHSEMAILADDRESSID OUTPUT
                    ,@CHANGEAGENTID=@CHANGEAGENTID
                    ,@UMHSID=@UMHSID
                    ,@EMAILADDRESSTYPECODEID=@HOMEEMAILADDRESSTYPECODEID
                    ,@EMAILADDRESS=@EMAILADDRESS
                    ,@ISPRIMARY=1
                    ,@INFOSOURCECODEID=@INFOSOURCECODEID
                    ,@STARTDATE=@EMAILADDRESSSTARTDATE

            END
            ELSE IF 0 < @MATCHINGEMAILADDRESSCOUNT
            BEGIN
                /*
                 * The batch email address matches the current Primary email address
                 */
                IF EXISTS (SELECT 1 FROM @MATCHINGEMAILADDRESSES WHERE ID=@PRIMARYEMAILADDRESSID)
                BEGIN
                    /* 
                     * If the current Primary email address matches the batch email address and the current
                     * Primary email address is a Home email address, then we're done. Otherwise, if the current 
                     * Primary email address matches the batch email address, but the current Primary email address 
                     * is a non-Home email address, then clear the Primary flag on the current non-Home email address
                     * and set a matching Home email address as Primary. If none of the matching email addresses is
                     * a Home email address, then add the batch email address as a new Primary Home email address.
                     */
                    IF @PRIMARYEMAILADDRESSTYPECODEID <> @HOMEEMAILADDRESSTYPECODEID
                    BEGIN
                        /*
                         * Clear the Primary flag on the current non-Home Primary email address
                         */
                        UPDATE USR_UMHS_EMAILADDRESS
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYEMAILADDRESSID;

                        /*
                         * Is there a matching batch email address to a current Home email address?
                         */
                        SET @UMHSEMAILADDRESSID = NULL

                        SELECT 
                            @UMHSEMAILADDRESSID=ID
                        FROM @MATCHINGEMAILADDRESSES
                        WHERE
                            EMAILADDRESSTYPECODE=@HOMEEMAILADDRESSTYPECODEID

                        IF @UMHSEMAILADDRESSID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home email address as the new Primary email address
                             */
                            UPDATE USR_UMHS_EMAILADDRESS
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSEMAILADDRESSID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch email address as a new Primary Home email address
                             */
                            SET @UMHSEMAILADDRESSID = NEWID();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_USR_UMHS_EMAILADDRESS
                                @ID=@UMHSEMAILADDRESSID OUTPUT
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@UMHSID=@UMHSID
                                ,@EMAILADDRESSTYPECODEID=@HOMEEMAILADDRESSTYPECODEID
                                ,@EMAILADDRESS=@EMAILADDRESS
                                ,@ISPRIMARY=1
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@STARTDATE=@EMAILADDRESSSTARTDATE
                        END
                    END
                END
                /* 
                 * The current Primary email address doesn't match the batch email address.
                 */                
                ELSE
                BEGIN
                    /*
                     * If the non-matching current Primary email address is a Home email address, then clear the Primary flag and end date
                     * this email address. If the current Primary email address is a non-Home email address, then clear the Primary flag on the non-Home email address.
                     * To set the new Primary Home email address, if one of the match email address is a Home email address, then set the Primary flag
                     * on the matching Home email address, otherwise if none of the matching email addresses is a Home email address,
                     * then add the batch email address as a new Primary Home email address.
                    */
                    IF @PRIMARYEMAILADDRESSTYPECODEID <> @HOMEEMAILADDRESSTYPECODEID
                    BEGIN
                        /*
                         * Clear the Primary flag on the current non-Home Primary email address
                         */
                        UPDATE USR_UMHS_EMAILADDRESS
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYEMAILADDRESSID;

                        /*
                         * Is there a matching batch email address to a current Home email address?
                         */
                        SET @UMHSEMAILADDRESSID = NULL

                        SELECT 
                            @UMHSEMAILADDRESSID=ID
                        FROM @MATCHINGEMAILADDRESSES
                        WHERE
                            EMAILADDRESSTYPECODE=@HOMEEMAILADDRESSTYPECODEID         
                            
                        IF @UMHSEMAILADDRESSID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home email address as the new Primary email address
                             */
                            UPDATE USR_UMHS_EMAILADDRESS
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSEMAILADDRESSID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch email address as a new Primary Home email address
                             */
                            SET @UMHSEMAILADDRESSID = NEWID();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_USR_UMHS_EMAILADDRESS
                                @ID=@UMHSEMAILADDRESSID OUTPUT
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@UMHSID=@UMHSID
                                ,@EMAILADDRESSTYPECODEID=@HOMEEMAILADDRESSTYPECODEID
                                ,@EMAILADDRESS=@EMAILADDRESS
                                ,@ISPRIMARY=1
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@STARTDATE=@EMAILADDRESSSTARTDATE
                        END
                    END
                    /*
                     * The Primary email address is a Home email address that doesn't match the batch email address
                    */
                    ELSE
                    BEGIN
                        /*
                         * Clear the Primary flag and end date current Primary Home email address
                        */
                        EXEC dbo.USP_USR_UMHS_BATCH_ENDDATEEMAIL
                             @ID = @PRIMARYEMAILADDRESSID
                            ,@ENDDATE = @CURRENTDATE
                            ,@CHANGEAGENTID=@CHANGEAGENTID;          
                            
                        /*
                         * Is there a matching batch email address to a current Home email address?
                         */
                        SET @UMHSEMAILADDRESSID = NULL

                        SELECT 
                            @UMHSEMAILADDRESSID=ID
                        FROM @MATCHINGEMAILADDRESSES
                        WHERE
                            EMAILADDRESSTYPECODE=@HOMEEMAILADDRESSTYPECODEID

                        IF @UMHSEMAILADDRESSID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home email address as the new Primary email address
                             */
                            UPDATE USR_UMHS_EMAILADDRESS
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSEMAILADDRESSID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch email address as a new Primary Home email address
                             */
                            SET @UMHSEMAILADDRESSID = NEWID();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_USR_UMHS_EMAILADDRESS
                                @ID=@UMHSEMAILADDRESSID OUTPUT
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@UMHSID=@UMHSID
                                ,@EMAILADDRESSTYPECODEID=@HOMEEMAILADDRESSTYPECODEID
                                ,@EMAILADDRESS=@EMAILADDRESS
                                ,@ISPRIMARY=1
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@STARTDATE=@EMAILADDRESSSTARTDATE
                        END
                    END
                END
            END
        END

        /*
         *************
         *** Phone ***
         *************
         */
        declare @UMHSPHONEID uniqueidentifier = null;
        declare @HOMEPHONETYPECODEID uniqueidentifier = isnull(@PHONETYPECODEID, '7F1CF5D0-468C-4FD8-933A-7496BB6003FA');   -- Home
        declare @DONOTCALLREASONCODEID uniqueidentifier = '1DB144E2-C3E3-4942-A231-18071A8228D5'; -- 'Last Known'
        DECLARE @MATCHINGPHONES table (ID uniqueidentifier, PHONETYPECODE UNIQUEIDENTIFIER);
        DECLARE @MATCHINGPHONECOUNT int=0;
        DECLARE @PRIMARYPHONEID uniqueidentifier = null;
        DECLARE @PRIMARYPHONETYPECODEID uniqueidentifier = null;
        /*
         * Don't add/edit if phone number is empty
         */
        IF nullif(isnull(@PHONENUMBER, ''), '') is NOT null
        BEGIN
            /*
             * GEt the ID for the current Primary Phone number
             */
            SELECT
                 @PRIMARYPHONEID = ID
                ,@PRIMARYPHONETYPECODEID = PHONETYPECODEID
            FROM USR_UMHS_PHONE
            WHERE
                UMHSID=@UMHSID
            AND ISPRIMARY=1
            AND nullif(isnull(ENDDATE, ''), '') is NULL
            
            /*
            * Get list of current phone numbers that match the batch phone number
            */ 
            INSERT INTO @MATCHINGPHONES (ID, PHONETYPECODE)
            SELECT
                ID
               ,PHONETYPECODEID
            FROM dbo.USR_UMHS_PHONE
            WHERE
                UMHSID=@UMHSID
            AND @PHONENUMBER=NUMBER
            AND nullif(isnull(ENDDATE, ''), '') IS NULL

            SELECT @MATCHINGPHONECOUNT=COUNT(1) FROM @MATCHINGPHONES;
            
            IF 0 = @MATCHINGPHONECOUNT
            BEGIN
               /*
                * There are no matching phone numbers to the batch phone number. If there is currently a Primary phone number that is a 
                * non-matching Home phone number, then clear the primary flag and end date the current Primary Home phone number. 
                * Otherwise, if the current Primary phone number is a non-Home phone number, then clear the Primary flag on the current 
                * non-Home Primary phone number. Then add the batch phone number as the new Primary Home phone number. 
                *
                * Is there currently a Primary phone number?
                */
                IF @PRIMARYPHONEID is not null
                BEGIN
                    /*
                     * If the existing Primary phone number is a Home phone number, then end date the current Primary Home phone number
                     */
                    IF @PRIMARYPHONETYPECODEID=@HOMEPHONETYPECODEID
                    BEGIN
                        exec dbo.USP_USR_UMHS_BATCH_ENDDATEPHONE
                             @ID=@PRIMARYPHONEID
                            ,@ENDDATE = @CURRENTDATE
                            ,@CHANGEAGENTID=@CHANGEAGENTID;
                    END
                    ELSE
                    BEGIN
                        /*
                         * Current Primary phone number is a non-home phone number, so clear Primary flag from 
                         * the current (non-home) Primary phone number in order to set the batch phone number as the
                         * Primary Home phone number
                         */
                        UPDATE USR_UMHS_PHONE
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYPHONEID;
                    END   
                END   
          
                /*
                 *  Add in the batched in phone number 
                 */
                SET @UMHSPHONEID = NEWID();
                EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_PHONE
                     @ID=@UMHSPHONEID
                    ,@UMHSID=@UMHSID
                    ,@CHANGEAGENTID=@CHANGEAGENTID
                    ,@PHONETYPECODEID=@HOMEPHONETYPECODEID
                    ,@NUMBER=@PHONENUMBER
                    ,@ISPRIMARY=1
                    ,@INFOSOURCECODEID=@INFOSOURCECODEID
                    ,@STARTDATE=@PHONESTARTDATE
                    ,@COUNTRYID=@PHONE_COUNTRYID;

            END
            ELSE IF 0 < @MATCHINGPHONECOUNT
            BEGIN
                /*
                 * The batch phone number matches the current Primary phone number
                 */
                IF EXISTS (SELECT 1 FROM @MATCHINGPHONES WHERE ID=@PRIMARYPHONEID)
                BEGIN
                    /* 
                     * If the current Primary phone number matches the batch phone number and the current
                     * Primary phone number is a Home phone number, then we're done. Otherwise, if the current 
                     * Primary phone number matches the batch phone number, but the current Primary phone number 
                     * is a non-Home phone number, then clear the Primary flag on the current non-Home phone number
                     * and set a matching Home phone number as Primary. If none of the matching phone numbers is
                     * a Home phone number, then add the batch phone number as a new Primary Home phone number.
                     */
                    IF @PRIMARYPHONETYPECODEID <> @HOMEPHONETYPECODEID
                    BEGIN
                        /*
                         * Clear the Primary flag on the current non-Home Primary phone number
                         */
                        UPDATE USR_UMHS_PHONE
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYPHONEID;

                        /*
                         * Is there a matching batch phone number to a current Home phone number?
                         */
                        SET @UMHSPHONEID = NULL

                        SELECT 
                            @UMHSPHONEID=ID
                        FROM @MATCHINGPHONES
                        WHERE
                            PHONETYPECODE=@HOMEPHONETYPECODEID

                        IF @UMHSPHONEID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home phone number as the new Primary phone number
                             */
                            UPDATE USR_UMHS_PHONE
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSPHONEID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch phone number as a new Primary Home phone number
                             */
                            SET @UMHSPHONEID = NEWID();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_PHONE
                                 @ID=@UMHSPHONEID
                                ,@UMHSID=@UMHSID
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@PHONETYPECODEID=@HOMEPHONETYPECODEID
                                ,@NUMBER=@PHONENUMBER
                                ,@ISPRIMARY=1
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@STARTDATE=@PHONESTARTDATE
                                ,@COUNTRYID=@PHONE_COUNTRYID;
                        END
                    END
                END
                /* 
                 * The current Primary phone number doesn't match the batch phone number.
                 */                
                ELSE
                BEGIN
                    /*
                     * If the non-matching current Primary phone number is a Home phone number, then clear the Primary flag and end date
                     * this phone number. If the current Primary phone number is a non-Home phone number, then clear the Primary flag on the non-Home phone number.
                     * To set the new Primary Home phone number, if one of the match phone number is a Home phone number, then set the Primary flag
                     * on the matching Home phone number, otherwise if none of the matching phone numberes is a Home phone number,
                     * then add the batch phone number as a new Primary Home phone number.
                    */
                    IF @PRIMARYPHONETYPECODEID <> @HOMEPHONETYPECODEID
                    BEGIN
                        /*
                         * Clear the Primary flag on the current non-Home Primary phone number
                         */
                        UPDATE USR_UMHS_PHONE
                        SET
                          ISPRIMARY=0,
                          CHANGEDBYID=@CHANGEAGENTID,
                          DATECHANGED=@CURRENTDATE
                        WHERE
                          ID=@PRIMARYPHONEID;

                        /*
                         * Is there a matching batch phone number to a current Home phone number?
                         */
                        SET @UMHSPHONEID = NULL

                        SELECT 
                            @UMHSPHONEID=ID
                        FROM @MATCHINGPHONES
                        WHERE
                            PHONETYPECODE=@HOMEPHONETYPECODEID         
                            
                        IF @UMHSPHONEID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home phone number as the new Primary phone number
                             */
                            UPDATE USR_UMHS_PHONE
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSPHONEID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch phone number as a new Primary Home phone number
                             */
                            SET @UMHSPHONEID = NEWID();
                            EXEC dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_PHONE
                                 @ID=@UMHSPHONEID
                                ,@UMHSID=@UMHSID
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@PHONETYPECODEID=@HOMEPHONETYPECODEID
                                ,@NUMBER=@PHONENUMBER
                                ,@ISPRIMARY=1
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@STARTDATE=@PHONESTARTDATE
                                ,@COUNTRYID=@PHONE_COUNTRYID;
                        END
                    END
                    /*
                     * The Primary phone number is a Home phone number that doesn't match the batch phone number
                    */
                    ELSE
                    BEGIN
                        /*
                         * Clear the Primary flag and end date current Primary Home phone number
                        */
                        EXEC dbo.USP_USR_UMHS_BATCH_ENDDATEPHONE
                             @ID=@PRIMARYPHONEID
                            ,@ENDDATE = @CURRENTDATE
                            ,@CHANGEAGENTID=@CHANGEAGENTID;         
                            
                        /*
                         * Is there a matching batch phone number to a current Home phone number?
                         */
                        SET @UMHSPHONEID = NULL

                        SELECT 
                            @UMHSPHONEID=ID
                        FROM @MATCHINGPHONES
                        WHERE
                            PHONETYPECODE=@HOMEPHONETYPECODEID

                        IF @UMHSPHONEID IS NOT NULL
                        BEGIN
                            /*
                             * Set matching Home phone number as the new Primary phone number
                             */
                            UPDATE USR_UMHS_PHONE
                            SET
                                ISPRIMARY=1,
                                CHANGEDBYID=@CHANGEAGENTID,
                                DATECHANGED=@CURRENTDATE
                            WHERE
                                ID=@UMHSPHONEID;
                        END
                        ELSE
                        BEGIN
                            /*
                             * Add batch phone number as a new Primary Home phone number
                             */
                            set @UMHSPHONEID = NEWID();
                            exec dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_PHONE
                                 @ID=@UMHSPHONEID
                                ,@UMHSID=@UMHSID
                                ,@CHANGEAGENTID=@CHANGEAGENTID
                                ,@PHONETYPECODEID=@HOMEPHONETYPECODEID
                                ,@NUMBER=@PHONENUMBER
                                ,@ISPRIMARY=1
                                ,@INFOSOURCECODEID=@INFOSOURCECODEID
                                ,@STARTDATE=@PHONESTARTDATE
                                ,@COUNTRYID=@PHONE_COUNTRYID;
                        END
                    END
                END
            END
        END

        /*
         *********************
         *** Phone (other) ***
         *********************
         */
        DECLARE @UMHSPHONEISPRIMARY BIT;
        DECLARE @OTHERPHONETYPECODEID UNIQUEIDENTIFIER;

        set @UMHSPHONEID=null;  -- Re-use variables used for Phone 
        set @UMHSPHONEISPRIMARY=0;
        set @OTHERPHONETYPECODEID=isnull(@PHONE_OTHERTYPECODEID, '7F1CF5D0-468C-4FD8-933A-7496BB6003FA'); -- Defaults to 'Other';


        /*
         * Don't add/edit if phone (other) is empty
         */
        if nullif(isnull(@PHONE_OTHER, ''), '') is NOT null
        BEGIN
            /*
            * Get list of current phone numbers that match the batch phone (other) number
            */ 
            DELETE FROM @MATCHINGPHONES;    -- Clear table used to get list of matching phone 
                                            -- numbers for batch phone of type Other

            INSERT INTO @MATCHINGPHONES (ID, PHONETYPECODE)
            SELECT
                ID
               ,PHONETYPECODEID
            FROM dbo.USR_UMHS_PHONE
            WHERE
                UMHSID=@UMHSID
            AND NUMBER=@PHONE_OTHER
            AND nullif(isnull(ENDDATE, ''), '') IS NULL
        
            SELECT @MATCHINGPHONECOUNT=COUNT(1) FROM @MATCHINGPHONES;
            
            IF 0 = @MATCHINGPHONECOUNT
            BEGIN
                /*
                 * Set Primary phone number flag.
                 */
                if exists (select ISPRIMARY FROM USR_UMHS_PHONE where ISPRIMARY=1 and nullif(isnull(ENDDATE, ''), '') is null)
                BEGIN
                    SET @ISPRIMARY=0
                END
                ELSE
                BEGIN
                    SET @ISPRIMARY=1
                END
           
                -- No matching phone (other) found
                set @UMHSPHONEID = NEWID();
                exec dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_PHONE
                    @ID=@UMHSPHONEID
                    ,@UMHSID=@UMHSID
                    ,@CHANGEAGENTID=@CHANGEAGENTID
                    ,@PHONETYPECODEID=@OTHERPHONETYPECODEID
                    ,@NUMBER=@PHONE_OTHER
                    ,@ISPRIMARY=@ISPRIMARY
                    ,@INFOSOURCECODEID=@INFOSOURCECODEID
                    ,@STARTDATE=@PHONESTARTDATE
                    ,@COUNTRYID=@PHONE_COUNTRYID;          
          END
          ELSE
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM @MATCHINGPHONES WHERE (PHONETYPECODE=@OTHERPHONETYPECODEID OR PHONETYPECODE=@HOMEPHONETYPECODEID))
            BEGIN
                /*
                 * Batch (other) phone doesn't match a Home and/or Other phone number, so add batch (other) phone as a 
                 * new non-Primary phone as type Other.
                 */
                set @UMHSPHONEID = NEWID();
                exec dbo.USR_USP_DATAFORMTEMPLATE_ADD_UMHS_PHONE
                    @ID=@UMHSPHONEID
                    ,@UMHSID=@UMHSID
                    ,@CHANGEAGENTID=@CHANGEAGENTID
                    ,@PHONETYPECODEID=@OTHERPHONETYPECODEID
                    ,@NUMBER=@PHONE_OTHER
                    ,@ISPRIMARY=0
                    ,@INFOSOURCECODEID=@INFOSOURCECODEID
                    ,@STARTDATE=@PHONESTARTDATE
                    ,@COUNTRYID=@PHONE_COUNTRYID                
            END
          END
        END
      END
      /*
       * Adding new MIMED Data to an existing constituent when the UMSHID is not found
       */
      ELSE  
      BEGIN
        /*
         * There is a constituent record for the individual, but they need a new MIMED Data Individual to be added
         */
        EXEC dbo.USP_USR_UMHS_BATCH_ADD_INDIVIDUAL
           @CHANGEAGENTID = @CHANGEAGENTID
          ,@CONSTITUENTID = @CONSTITUENTID        -- Primary record ID
          ,@MRN = @MRN                            -- required
          ,@CPISEQUENCE = @CPISEQUENCE            -- required
          ,@FIRSTNAME = @FIRSTNAME
          ,@MIDDLENAME = @MIDDLENAME
          ,@LASTNAME = @LASTNAME                  -- required
          ,@SUFFIXCODEID = @SUFFIXCODEID
          ,@BIRTHDATE = @BIRTHDATE                -- required
          ,@ADDRESSBLOCK = @ADDRESSBLOCK
          ,@CITY = @CITY
          ,@STATEID = @STATEID
          ,@POSTCODE = @POSTCODE
          ,@ADDRESSCOUNTRYID = @COUNTRYID                         -- United States
          ,@ADDRESSTYPECODEID = @ADDRESSTYPECODEID                -- Home
          ,@INFOSOURCECODEID = @INFOSOURCECODEID                  -- Med/Hospital
          ,@HISTORICALSTARTDATE = @HISTORICALSTARTDATE
          ,@PHONE = @PHONENUMBER
          ,@PHONETYPECODEID = @PHONETYPECODEID                    -- Home
          ,@PHONE_COUNTRYID = @PHONE_COUNTRYID                    -- United States
          ,@PHONE_OTHER = @PHONE_OTHER
          ,@PHONE_OTHERTYPECODEID = @PHONE_OTHERTYPECODEID        -- Other
          ,@PHONE_OTHER_COUNTRYID = @PHONE_OTHER_COUNTRYID        -- United States
          ,@PHONESTARTDATE = @PHONESTARTDATE
          ,@EMAILADDRESS = @EMAILADDRESS
          ,@EMAILADDRESSTYPECODEID = @EMAILADDRESSTYPECODEID      -- Home E-mail Address
          ,@EMAILADDRESSSTARTDATE = @EMAILADDRESSSTARTDATE
          ,@GENDERCODE = @GENDERCODE
          ,@ISDMINELIGIBLE = @ISDMINELIGIBLE
          ,@DMINELIGIBLEREASONCODEID = @DMINELIGIBLEREASONCODEID
          ,@UMHSDATA_LASTPROCDATE = @UMHSDATA_LASTPROCDATE
    
      END
      
    declare @NA_WEALTHSCORESRATINGID uniqueidentifier = '18AD82E5-9A55-4AB7-B286-6C4324AAFE77';      -- NA-No match in wealth databases
    declare @NEW_WEALTHSCORES_ATTRIBUTEID uniqueidentifier;
    declare @CURR_WEALTHSCORES_ATTRIBUTEID uniqueidentifier;

    if @WEALTHSCORES_RATINGID is NOT NULL
    begin
        /*
         * End date old Wealth Engine Score and Giving Capacity attributes
         */
        update ATTRIBUTEEFC0C2477F754CD1A03AD7D4AA3207A3
        set
            ENDDATE=@CURRENTDATE,
            CHANGEDBYID=@CHANGEAGENTID,
            DATECHANGED=@CURRENTDATE
        where
            MODELINGANDPROPENSITYID=@CONSTITUENTID
        and ENDDATE IS NULL

        update dbo.ATTRIBUTEFECBED53648A4E6394F5D34D828FB9D9
        set
            ENDDATE=@CURRENTDATE,
            CHANGEDBYID=@CHANGEAGENTID,
            DATECHANGED=@CURRENTDATE
        where
            MODELINGANDPROPENSITYID=@CONSTITUENTID
        and ENDDATE IS NULL
            

        /*
         * Search for existing Wealth Point Rating attribute
         */
        set @CURR_WEALTHSCORES_ATTRIBUTEID = NULL;
        select top 1 
            @CURR_WEALTHSCORES_ATTRIBUTEID=ID
        from ATTRIBUTEC35DC7056236482E810402B9C71B3318    -- Rating
        where
            MODELINGANDPROPENSITYID=@CONSTITUENTID
        and ENDDATE is NULL;

        if @CURR_WEALTHSCORES_ATTRIBUTEID is NULL
        begin
            /*
             * New Wealth Point Rating attribute
             */
            set @NEW_WEALTHSCORES_ATTRIBUTEID=newid();

            exec dbo.USP_ATTRIBUTEC35DC7056236482E810402B9C71B3318_ADD
	              @ID = @NEW_WEALTHSCORES_ATTRIBUTEID,
	              @PARENTID = @CONSTITUENTID,
	              @VALUE = @WEALTHSCORES_RATINGID,
	              @CHANGEAGENTID = @CHANGEAGENTID,
	              @STARTDATE = @UMHSDATA_LASTPROCDATE
        end
        else
        begin
            /*
             * Update existing Wealth Point Rating attribute
             */
            update ATTRIBUTEC35DC7056236482E810402B9C71B3318    -- Rating
            set 
                WEALTHPOINTRATINGCATEGORYCODEID=@WEALTHSCORES_RATINGID,
                STARTDATE=@UMHSDATA_LASTPROCDATE,
                CHANGEDBYID=@CHANGEAGENTID,
                DATECHANGED=@CURRENTDATE
            where
                ID=@CURR_WEALTHSCORES_ATTRIBUTEID
        end
    
        /*
         * Default the Total Estimated Assets value when empty
         */
        if nullif(isnull(@WEALTHSCORES_TOTALESTIMATEDASSETS, ''), '') IS NULL
        begin
            set @WEALTHSCORES_TOTALESTIMATEDASSETS = N'Not available'
        end

        /*
         * Search for existing Wealth Point Total Estimated Assets attribute
         */
        set @CURR_WEALTHSCORES_ATTRIBUTEID = NULL;
        select top 1 
            @CURR_WEALTHSCORES_ATTRIBUTEID=ID
        from ATTRIBUTE7EAF9B3B191F4A29A9BD7A7F63EE3F76    -- Total Estimated Assets
        where
            MODELINGANDPROPENSITYID=@CONSTITUENTID
        and ENDDATE is NULL;

        if @CURR_WEALTHSCORES_ATTRIBUTEID is NULL
        begin
            /*
             * Add new Wealth Point Total Estimated Assets attribute
             */
            set @NEW_WEALTHSCORES_ATTRIBUTEID=newid();

            exec dbo.USP_ATTRIBUTE7EAF9B3B191F4A29A9BD7A7F63EE3F76_ADD
	              @ID = @NEW_WEALTHSCORES_ATTRIBUTEID,
	              @PARENTID = @CONSTITUENTID,
	              @VALUE = @WEALTHSCORES_TOTALESTIMATEDASSETS,
	              @CHANGEAGENTID = @CHANGEAGENTID,
	              @STARTDATE = @UMHSDATA_LASTPROCDATE
        end
        else
        begin
            /*
             * Update existing Wealth Point Total Estimated Assets attribute
             */
            update ATTRIBUTE7EAF9B3B191F4A29A9BD7A7F63EE3F76    -- Total Estimated Assets
            set 
                [VALUE]=@WEALTHSCORES_TOTALESTIMATEDASSETS,
                STARTDATE=@UMHSDATA_LASTPROCDATE,
                CHANGEDBYID=@CHANGEAGENTID,
                DATECHANGED=@CURRENTDATE
            where
                ID=@CURR_WEALTHSCORES_ATTRIBUTEID
        end
    end

    END TRY
	BEGIN CATCH
	    EXEC dbo.USP_RAISE_ERROR
	    RETURN 1
	END CATCH

  return 0;
				]]>
            </c:CreateProcedureSQL>
        </SaveImplementation>

    </SPDataForm>

    <!-- describe fields on the form, which correspond to parameters on the SP.  Note that system paramters 
	like the record ID, DATALOADED, TSLONG, and CURRENTAPPUSERID need not be listed. -->
    <FormMetaData xmlns="bb_appfx_commontypes">
        <FormFields>
            <FormField FieldID="CONSTITUENTID" DataType="Guid" Caption="Constituent" Hidden="false" />
            <FormField FieldID="BATCHCONSTITUENTID" DataType="Guid" Hidden="true" Caption="BATCHCONSTITUENTID"/>
            <FormField FieldID="SEQUENCE" Caption="Sequence" Required="true" Hidden="true" />
            <FormField FieldID="VALIDATEONLY" DataType="Boolean" Caption="Validate only" />
            <!--Batch fields-->
            <FormField FieldID="MRN" Caption="Medical Record Number (MRN)"  DataType="String" MaxLength="50" Required="true" />
            <FormField FieldID="CPISEQUENCE" Caption="CPI sequence" DataType="String" MaxLength="50" Required="true" />
            <FormField FieldID="CONSTITUENTLOOKUPID" Caption="Constituent Lookup ID" Description="Constituent's Lookup ID" DataType="String" MaxLength="200" />
            <FormField FieldID="FIRSTNAME" Caption="First name" DataType="String" MaxLength="50" Required="true" />
            <FormField FieldID="MIDDLENAME" Caption="Middle name" DataType="String" MaxLength="50" />
            <FormField FieldID="LASTNAME" Caption="Last name" DataType="String" MaxLength="100" Required="true"/>
            <FormField FieldID="ISUMAFFILATION" Description="Is the Constituent have an affilation with U-M?" Caption="Is U-M affiliated" DataType="Boolean" ReadOnly="true">
                <Link IDColumn="HASUMAFFILIATION"/>
            </FormField>
            <FormField FieldID="SUFFIXCODEID" Caption="Suffix" DataType="Guid">
                <CodeTable CodeTableName="SUFFIXCODE"/>
            </FormField>
            <FormField FieldID="BIRTHDATE" Caption="Birth date" DataType="FuzzyDate" Required="true"/>
            <FormField FieldID="ADDRESSBLOCK" Caption="Address" DataType="String" MaxLength="500" Category="Address"/>
            <FormField FieldID="CITY" Caption="City" DataType="String" MaxLength="100"  Category="Address"/>
            <FormField FieldID="STATEID" Caption="State" DataType="Guid"  Category="Address">
                <SimpleDataList SimpleDataListID="cae6185d-898e-474f-84d1-dadaa4b63ad3" />
            </FormField>
            <FormField FieldID="POSTCODE" Caption="Post code" DataType="String" MaxLength="24"  Category="Address"/>
            <!-- Default Country: United States -->
            <FormField FieldID="COUNTRYID" Caption="Address country" DataType="Guid"  Category="Address"  DefaultValueText="27CF0F7D-CDAF-448F-80DE-E9196BF28D36">
                <SimpleDataList SimpleDataListID="5a7ceca8-d00f-497a-ba94-498520028f5c" />
            </FormField>
            <!-- Default code type for Address: "Home" -->
            <FormField FieldID="ADDRESSTYPECODEID" Caption="Address type code" DataType="Guid" Category="Address" DefaultValueText="68F9E4F9-0F55-4EDC-8369-8773B6E95245">
                <CodeTable CodeTableName="ADDRESSTYPECODE"/>
            </FormField>
            <!-- Default Infosource code: "Med/Hospital Batch"-->
            <FormField FieldID="INFOSOURCECODEID" Caption="Information source code" DataType="Guid" Category="Address" DefaultValueText="3c3c7fa4-d8c3-444c-96a8-34a773493137" >
                <CodeTable CodeTableName="INFOSOURCECODE"/>
            </FormField>
            <FormField FieldID="HISTORICALSTARTDATE" Description="Start date for Address" Caption="Historical start date" DataType="Date" Category="Address"/>
            <FormField FieldID="PHONENUMBER" Caption="Phone" DataType="String" MaxLength="200" Category="Phone" />
            <!-- Default code type for Phone Other: "Home" -->
            <FormField FieldID="PHONETYPECODEID" Caption="Phone type code" DataType="Guid" Category="Phone" DefaultValueText="7F1CF5D0-468C-4FD8-933A-7496BB6003FA">
                <CodeTable CodeTableName="PHONETYPECODE"/>
            </FormField>
            <!-- Default Country: United States -->
            <FormField FieldID="PHONE_COUNTRYID" Caption="Phone country" DataType="Guid"  Category="Phone" DefaultValueText="27CF0F7D-CDAF-448F-80DE-E9196BF28D36">
                <SimpleDataList SimpleDataListID="5a7ceca8-d00f-497a-ba94-498520028f5c" />
            </FormField>
            <FormField FieldID="PHONE_OTHER" Caption="Phone (other)" DataType="String" MaxLength="200" Category="Phone" />
            <!-- Default code type for Phone Other: "Other" -->
            <FormField FieldID="PHONE_OTHERTYPECODEID" Caption="Phone (other) type code" DataType="Guid" Category="Phone" DefaultValueText="7F1CF5D0-468C-4FD8-933A-7496BB6003FA">
                <CodeTable CodeTableName="PHONETYPECODE"/>
            </FormField>
            <!-- Default Country: United States -->
            <FormField FieldID="PHONE_OTHER_COUNTRYID" Caption="Phone (other) country" DataType="Guid"  Category="Phone" DefaultValueText="27CF0F7D-CDAF-448F-80DE-E9196BF28D36">
                <SimpleDataList SimpleDataListID="5a7ceca8-d00f-497a-ba94-498520028f5c" />
            </FormField>
            <FormField FieldID="PHONESTARTDATE" Caption="Phone start date" DataType="Date" Category="Phone" />
            <FormField FieldID="EMAILADDRESS" Caption="Email address" DataType="String" MaxLength="100" Category="Email" />
            <!-- Default code type for Email Address: "Home E-mail Address" -->
            <FormField FieldID="EMAILADDRESSTYPECODEID" Caption="Email address type code" DataType="Guid" Category="Email" DefaultValueText="C4ED26B5-36FE-4E24-AB95-10AA71AC7968" >
                <CodeTable CodeTableName="EMAILADDRESSTYPECODE"/>
            </FormField>
            <FormField FieldID="EMAILADDRESSSTARTDATE" Caption="Email start date" DataType="Date" Category="Email" />
            <FormField FieldID="GENDERCODE" Caption="Gender" DataType="TinyInt" DefaultValueText="0" Required="true">
                <ValueList>
                    <Items>
                        <Item>
                            <Value>0</Value>
                            <Label>Unknown</Label>
                        </Item>
                        <Item>
                            <Value>1</Value>
                            <Label>Male</Label>
                        </Item>
                        <Item>
                            <Value>2</Value>
                            <Label>Female</Label>
                        </Item>
                    </Items>
                </ValueList>
            </FormField>
            <FormField FieldID="ISDMINELIGIBLE" Caption="Direct Mail Ineligible" DataType="Boolean"  DefaultValueText="0" AllowNullValue="false" />
            <FormField FieldID="DMINELIGIBLEREASONCODEID" Caption="Direct Mail Ineligible Reason" DataType="Guid" >
                <CodeTable CodeTableName="USR_UMHS_DMINELIGIBLEREASONCODE"/>
            </FormField>
            <FormField FieldID="WEDMSCORECODEID" Caption="Wealth Engine Data Mining Score (Med)" DataType="Guid" Category="Wealth Engine" Hidden="true" >
                <CodeTable CodeTableName="WEDMSCORECODE" />
            </FormField>
            <FormField FieldID="WEDMSCORESTARTDATE" Caption="Wealth Engine Data Mining Score (Med) start date" DataType="Date" Category="Wealth Engine" Hidden="true" />
            <FormField FieldID="WEESTGIVCAPACITYCODEID" Caption="Wealth Engine Est Giv Capacity (Med)" DataType="Guid"  Category="Wealth Engine" Hidden="true" >
                <CodeTable CodeTableName="WEESTGIVCAPACITYCODE"/>
            </FormField>
            <FormField FieldID="WEESTGIVCAPACITYCOMMENT" Caption="Wealth Engine Est Giv Capacity (Med) comment" DataType="String" MaxLength="510" Category="Wealth Engine" DefaultValueText="" Hidden="true" />
            <FormField FieldID="WEESTGIVCAPACITYSTARTDATE" Caption="Wealth Engine Est Giv Capacity (Med) start date" DataType="Date" Category="Wealth Engine" Hidden="true" />
            <FormField FieldID="UMHSDATA_LASTPROCDATE" Description="MIMED Imported last process date" Caption="MIMED Imported last process date" DataType="Date" IncludeTimeOnDate="true" Category="MIMED Import (only)" Hidden="true" />
            <FormField FieldID="ISGPIMPORTEDRECORD" Description="Is record imported from the Grateful Patient import process" Caption="Is Grateful Patient imported record" DataType="TinyInt" MinValue="0" MaxValue="1" Hidden="true" ReadOnly="true" />
            <FormField FieldID="HASUMAFFILIATION" Description="Does the constiuent have an affilation and/or constiteuncy of Faculty, Staff, or Board Member with U-M" DataType="TinyInt" MinValue="0" MaxValue="1" Hidden="true" ReadOnly="false" />
            <FormField FieldID="WEALTHSCORES_TOTALESTIMATEDASSETS" Description="Wealth Scores Total Estimated Assets" Caption="Wealth Scores Total Estimated Assets" DataType="String" MaxLength="50" Category="Blackbaud Wealth Scores Ratings" />
            <FormField FieldID="WEALTHSCORES_RATINGID" Description="Wealth Scores Rating" Caption="Wealth Scores Rating" DataType="Guid" Category="Blackbaud Wealth Scores Ratings" >
                <CodeTable CodeTableName="WEALTHPOINTRATINGCATEGORYCODE" />
            </FormField>
            </FormFields>
    </FormMetaData>

</EditDataFormTemplateSpec>