<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:c="bb_appfx_commontypes" 
	ID="a3b8a636-b941-4a22-ab25-60724e60532f"
	Name="USR_USP_UMHS_FINDFRIEND"
	Description="Returns true or false if a possible MIMEDFRIEND exists"
	Author="BrightVine Solutions"
	SPName="USR_USP_UMHS_FINDFRIEND" 
  GrantServiceRolePermission="true"
	>

	<CreateProcedureSQL>
		<![CDATA[
CREATE PROCEDURE DBO.USR_USP_UMHS_FINDFRIEND 
(
  @CONSTITUENTID          UNIQUEIDENTIFIER = NULL,
  @BATCHID                UNIQUEIDENTIFIER = NULL
)
AS

SET NOCOUNT ON

DECLARE @NAME              NVARCHAR(100),
        @KEYNAME           NVARCHAR(100),
        @FIRSTNAME         NVARCHAR(50),
        @POSTCODE          NVARCHAR(12),
        @ADDRESSBLOCK      NVARCHAR(150),
        @ISORGANIZATION    BIT,
        @ISGROUP           BIT,
        @TITLECODEID       UNIQUEIDENTIFIER,
        @MIDDLENAME        NVARCHAR(50),
        @SUFFIXCODEID      UNIQUEIDENTIFIER,
        @COUNTRYID         UNIQUEIDENTIFIER,
        @EMAILADDRESS      NVARCHAR(100),
        @PHONENUMBER       NVARCHAR(100),
        @ADDRESSTYPECODEID UNIQUEIDENTIFIER,
        @PHONETYPECODEID   UNIQUEIDENTIFIER,
        @EMAILTYPECODEID   UNIQUEIDENTIFIER,
        @OVERALLMATCHTHRESHOLD  DECIMAL(20, 4) = 30,
        @AUTOMATCHTHRESHOLD     DECIMAL(20, 4) = 0 

IF EXISTS (SELECT ID
           FROM   DBO.BATCHREVENUECONSTITUENT
           WHERE  ID = @CONSTITUENTID)
  BEGIN
      SELECT @KEYNAME = KEYNAME,
             @NAME = NAME,
             @FIRSTNAME = FIRSTNAME,
             @POSTCODE = POSTCODE,
             @ADDRESSBLOCK = ADDRESSBLOCK,
             @ISORGANIZATION = ISORGANIZATION,
             @ISGROUP = ISGROUP,
             @TITLECODEID = TITLECODEID,
             @MIDDLENAME = MIDDLENAME,
             @SUFFIXCODEID = SUFFIXCODEID,
             @COUNTRYID = COUNTRYID,
             @EMAILADDRESS = EMAILADDRESS,
             @PHONENUMBER = NUMBER,
             @ADDRESSTYPECODEID = ADDRESSTYPECODEID,
             @PHONETYPECODEID = PHONETYPECODEID,
             @EMAILTYPECODEID = EMAILADDRESSTYPECODEID
      FROM   DBO.BATCHREVENUECONSTITUENT
      WHERE  ID = @CONSTITUENTID
  END

DECLARE @CANDIDATE TABLE (
  CONSTITUENTID      UNIQUEIDENTIFIER,
  ADDRESSID          UNIQUEIDENTIFIER,
  EMAILADDRESSID     UNIQUEIDENTIFIER,
  PHONEID            UNIQUEIDENTIFIER,
  MATCHPERCENTAGE    NUMERIC(5, 2),
  STREETNUMBERRESULT TINYINT,
  STREETNAMERESULT   TINYINT,
  POSTCODERESULT     TINYINT
)

/*
IF @OVERALLMATCHTHRESHOLD IS NULL AND @BATCHID IS NOT NULL
  BEGIN
      SELECT @OVERALLMATCHTHRESHOLD = OVERALLMATCHTHRESHOLD,
             @AUTOMATCHTHRESHOLD = AUTOMATCHTHRESHOLD
      FROM   DBO.BATCH
      WHERE  ID = @BATCHID
  END
*/

INSERT INTO @CANDIDATE (
  CONSTITUENTID,
  ADDRESSID,
  EMAILADDRESSID,
  PHONEID,
  MATCHPERCENTAGE,
  STREETNUMBERRESULT,
  STREETNAMERESULT,
  POSTCODERESULT
)
SELECT CONSTITUENTID,
       ADDRESSID,
       EMAILADDRESSID,
       PHONEID,
       MATCHPERCENTAGE,
       STREETNUMBERRESULT,
       STREETNAMERESULT,
       POSTCODERESULT
FROM   DBO.USR_UMHS_UFN_FINDMIMEDMATCHES_COMPOSITETHRESHOLD (@TITLECODEID, @FIRSTNAME, @MIDDLENAME, @KEYNAME, @SUFFIXCODEID, @ADDRESSBLOCK, @POSTCODE, @COUNTRYID, @ISORGANIZATION, @ISGROUP, NULL, NULL, @EMAILADDRESS, @PHONENUMBER, @OVERALLMATCHTHRESHOLD, @AUTOMATCHTHRESHOLD) DUPLICATES

DECLARE @NULLVALUE UNIQUEIDENTIFIER = (SELECT CAST(CAST(0 AS BINARY) AS UNIQUEIDENTIFIER))

DECLARE @COUNT INT = (
  SELECT COUNT(C.ID)
  FROM   @CANDIDATE D
         INNER JOIN DBO.CONSTITUENT C ON D.CONSTITUENTID = C.ID
         LEFT JOIN DBO.ADDRESS A ON D.ADDRESSID = A.ID
         LEFT JOIN DBO.STATE S ON A.STATEID = S.ID
         LEFT JOIN DBO.PHONE P ON D.PHONEID = P.ID
         LEFT JOIN DBO.EMAILADDRESS E ON D.EMAILADDRESSID = E.ID
)


select @COUNT

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
